{
    "sourceFile": "src/FirebaseFirestoreRestService.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1693428868355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1693429576271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,4 +2,172 @@\n \r\n const auth = firebase.auth();\r\n \r\n const BASE_URL = process.env.REACT_APP_CLOUD_FIRESTORE_FUNCTION_API_URL;\r\n+\r\n+const createDocument = async (collection, document) => {\r\n+  let token;\r\n+\r\n+  try {\r\n+    token = await auth.currentUser.getIdToken();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+\r\n+  try {\r\n+    const response = await fetch(`${BASE_URL}/${collection}`, {\r\n+      method: \"POST\",\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+        \"Content-Type\": \"application/json\",\r\n+      },\r\n+      body: JSON.stringify(document),\r\n+    });\r\n+\r\n+    if (response.status !== 201) {\r\n+      const errorMessage = await response.text();\r\n+      const error = { message: errorMessage };\r\n+\r\n+      throw error;\r\n+    }\r\n+\r\n+    return response.json();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+const readDocuments = async ({\r\n+  collection,\r\n+  queries,\r\n+  orderByField,\r\n+  orderByDirection,\r\n+  perPage,\r\n+  pageNumber,\r\n+}) => {\r\n+  try {\r\n+    const url = new URL(`${BASE_URL}/${collection}`);\r\n+\r\n+    for (const query of queries) {\r\n+      url.searchParams.append(query.field, query.value);\r\n+    }\r\n+\r\n+    if (orderByField) {\r\n+      url.searchParams.append(\"orderByField\", orderByField);\r\n+    }\r\n+\r\n+    if (orderByDirection) {\r\n+      url.searchParams.append(\"orderByDirection\", orderByDirection);\r\n+    }\r\n+\r\n+    if (perPage) {\r\n+      url.searchParams.append(\"perPage\", perPage);\r\n+    }\r\n+\r\n+    if (pageNumber) {\r\n+      url.searchParams.append(\"pageNumber\", pageNumber);\r\n+    }\r\n+\r\n+    let token;\r\n+\r\n+    try {\r\n+      token = await auth.currentUser.getIdToken();\r\n+    } catch (error) {\r\n+      // continue.\r\n+    }\r\n+\r\n+    const response = await fetch(url, {\r\n+      method: \"GET\",\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n+\r\n+    if (response.status !== 200) {\r\n+      const errorMessage = await response.text();\r\n+      const error = { message: errorMessage };\r\n+\r\n+      throw error;\r\n+    }\r\n+\r\n+    return response.json();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+const updateDocument = async (collection, id, document) => {\r\n+  let token;\r\n+\r\n+  try {\r\n+    token = await auth.currentUser.getIdToken();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+\r\n+  try {\r\n+    const response = await fetch(`${BASE_URL}/${collection}/${id}`, {\r\n+      method: \"PUT\",\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+        \"Content-Type\": \"application/json\",\r\n+      },\r\n+      body: JSON.stringify(document),\r\n+    });\r\n+\r\n+    if (response.status !== 200) {\r\n+      const errorMessage = await response.text();\r\n+      const error = { message: errorMessage };\r\n+\r\n+      throw error;\r\n+    }\r\n+\r\n+    return response.json();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+const deleteDocument = async (collection, id) => {\r\n+  let token;\r\n+\r\n+  try {\r\n+    token = await auth.currentUser.getIdToken();\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+\r\n+  try {\r\n+    const response = await fetch(`${BASE_URL}/${collection}/${id}`, {\r\n+      method: \"DELETE\",\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+        \"Content-Type\": \"application/json\",\r\n+      },\r\n+    });\r\n+\r\n+    if (response.status !== 200) {\r\n+      const errorMessage = await response.text();\r\n+      const error = { message: errorMessage };\r\n+\r\n+      throw error;\r\n+    }\r\n+  } catch (error) {\r\n+    alert(error.message);\r\n+    throw error;\r\n+  }\r\n+};\r\n+\r\n+const FirebaseFirestoreRestService = {\r\n+  createDocument,\r\n+  readDocuments,\r\n+  updateDocument,\r\n+  deleteDocument,\r\n+};\r\n+\r\n+export default FirebaseFirestoreRestService;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1693429629862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,6 +168,6 @@\n   readDocuments,\r\n   updateDocument,\r\n   deleteDocument,\r\n };\r\n-\n-export default FirebaseFirestoreRestService;\n\\ No newline at end of file\n+\r\n+export default FirebaseFirestoreRestService;\r\n"
                }
            ],
            "date": 1693428868355,
            "name": "Commit-0",
            "content": "import firebase from \"./FirebaseConfig\";\r\n\r\nconst auth = firebase.auth();\r\n\r\nconst BASE_URL = process.env.REACT_APP_CLOUD_FIRESTORE_FUNCTION_API_URL;"
        }
    ]
}